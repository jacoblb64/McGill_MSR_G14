data = read.csv('~/Desktop/new_data_full.csv')
data = read.csv('~/Desktop/jruby_100.csv')
names(data)
data$author_name
names = .Last.value
names
summary(names)
unique(names)
names = unique(names)
names
summary(names)
names(names)
require(plyr)
apply()
data.frame(names)
nameframe = .Last.value
nameframe
names(nameframe)
nameframe['new']
nameframe$new
nameframe$names
nameframe[['new']]
names(nameframe)
names2 = names
names2
names$test = names2
names
nameframe$test = names2
summary(nameframe)
nameframe
nameframe$num <= 0
nameframe$num <- 0
nameframe
range(10)
range(1,10)
c(1:10)
nameframe$num <- c(5:20)
nameframe$num <- c(5:22)
nameframe$num <- c(5:18)
nameframe
nametest <- nameframe[1:5,]
nametest
nametest <- nameframe[ num == 5]
nametest <- nameframe[ which(nametest$num == 5),]
nametest
summary(data)
jruby = data[ which(data$name == 'jruby')]
jruby = data[ which(data$name == 'jruby'),]
summary(jruby)
summary(jruby$name)
nametest
nametest = nameframe[1:5,]
namtest
nametest
NROW(data)
datatest = data[ which(data$author_name %in% nametest),]
NROW(datatest)
datatest
datatest = data[ which(data$author_name %in% nametest$names),]
NROW(datatest)
summary(datatest)
data = read.csv('~/Desktop/new_data_full.csv')
names(data)
names = names(data)
names = data$name
summary(names)
names = unique(names)
names
subset = names[1:5,]
subset = names[1:5]
subset
summary(subset)
subset = names[1:6]
summary(subset)
subset
subset = names[1:5]
subnames = subset
subset = data[ which( data$name %in% subset),]
summary(subset)
subset$commit_message <- NULL
subset$commit_hash <- NULL
names(subset)
write.csv(subset, '~/Desktop/new_data_subset.csv')
data$commit_message <- NULL
data$commit_hash <- NULL
summary(data)
write.csv(data, '~/Desktop/new_data_min.csv')
q()
data
q()
data = read.csv('~/Desktop/new_data_subset.csv')
meanTable = data.frame(unique(data$name))
meanTable
meanTable[mlt]
names(data) = c("name")
names(data)
names(meanTable) = c("name")
meanTable
brierTable = meanTable
brierTable
names(brierTable) = "proj_name"
names(meanTable)
names(brierTable)
meanTable$name[1]
meanTable$name[2]
meanTable$new[1] = '2'
meanTable
meanTable$new[1] = '3'
meanTable
meanTable$new
meanTable$new = NULL
meanTable
which(meanTalble$name == 'dltk')
which(meanTable$name == 'dltk')
meanTable[which(meanTable$name == 'dltk),]
q
meanTable[which(meanTable$name == 'dltk'),]
meanTable$new <- NA
meanTable
meanTable$new[which(meanTable$name == 'dltk')] <- 55
meanTable
data.drame(unique(data$name), "name")
data.frame(unique(data$name), "name")
var = 'new'
var = 'newnew'
meanTable[, var] <- NA
meanTable
meanTable[var]
meanTable[var, 5]
meanTable[name, 5]
meanTable[name]
meanTable
meanTable$name
name
namestr = 'name'
namestr
meanTable[namestr]
meanTable[namestr, 5]
meanTable[namestr, 3]
meanTable[namestr][3]
meanTable$name[3]
meanTable[namestr][3]
meanTable[namestr]
meanTable[3, namestr]
meanTable[which(meanTable[namestr] == 'dltk'), namestr]
meanTable[which(meanTable[namestr] == 'mlt'), namestr]
data = read.csv('~/Desktop/new_data_subset.csv')
source ('analysis scripts/fit_and_performance.r')
source ('analysis scripts/fit_and_performance.r')
source ('analysis scripts/fit_and_performance.r')
metrics
runExperiment(data, metrics, rq1)
results = .Last.value
results
summary(results)
data
summary(data)
summary(data$contains_bug)
as.logical(data$contains_bug)
eval(parse(data$contains_bug))
runExperiment(data,metrics,rq1)
aucTable
brierTable
brierTable <- NULL
brierTAble
brierTable
results = runExperiment(data, metrics, rq2)
metrics
savehistory()
meanTable
data$name[1]
curName = .Last.value
curName
meanTable <- NULL
meanTable = data.frame(unique(data$name))
names(meanTable) = "name"
meanTable
curName = data$name[1]
print(curName)
aucTable[, curName] <- NA
meanTable[, curName] <- NA
meanTable[, c(curName)] <- NA
curName
c(curName)
as.character(curName)
meanTable[, as.character(curName)<- NA
]
meanTable[, as.character(curName)]<- NA
meanTable
curName = as.character(curName)
curName
runExperiment(data, metrics, rq1)
  aucTable = data.frame(unique(data$name))
aucTable
curName = as.character(mydata$name[1])
curName = as.character(data$name[1])
aucTable[, curName] <- NA
fit <- lrm(as.formula(form), data=data, x=T, y=T, penalty=penaltySetting)
names(aucTable) = "name"
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
cleanMetrics <- getCleanMetrics(met, data)
cleanMetrics <- getCleanMetrics(met, 'commit_words')
met <- append(metrics, 'commit_words')
cleanMetrics <- getCleanMetrics(met, 'commit_words')
cleanMetrics <- getCleanMetrics(met, data)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=data, x=T, y=T, penalty=penaltySetting)
v <- validate(fit, B=boots)
auc <- v[1,5]/2+0.5
aucTable[which(aucTable$name == curName), curName] <- auc
aucTable
aucTable$NA <- NULL
aucTable
names(aucTable)
aucTable[NA]
aucTable[NA,]
names(aucTable)
aucTable
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
data
names(data)
data$contains_bug == 't'
isTrue = .Last.value
summary(isTrue)
data$contains_bug = isTrue
summary(data$contains_bug)
runExperiment(data, metrics, rq1)
results = .Last.value
results
dudeTable
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
testFunction()
testFrame2 = read.csv('testFrame2.csv')
testFrame2
testFrame2$X <- NULL
testFrame2
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
summary(data)
summary(data[which(data$name == 'dltk'),])
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/performance.r')
performance.auc()
runExperiment(data, metrics, rq1)
source('analysis scripts/performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
fit
source('analysis scripts/performance.r')
performance.auc(fit, data)
data$buggy
colnames(dataframe)[which(names(dataframe) == "columnName")] <- "newColumnName"
colnames(data)[which(names(data) == "contains_bug")] <- "buggy"
performance.auc(fit, data)
colnames(data)[which(names(data) == "buggy")] <- "contains_bug"
names(data)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
subsetOkForFit(data[which(data$name == 'dltk'),])
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
runExperiment(data, metrics, rq1)
aucTable
data.drame(aucTable)
data.frame(aucTable)
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
data = read.csv('~/Desktop/new_data_min.csv')
names = unique(data$name)
names = names[1:20]
subset = data[which(data$name %in% names),]
summary(subset)
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 't'
runExperiment(subset, metrics, rq1)
results = .Last.value
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 't'
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 'TRUE'
summary(subset$contains_bug)
subset = data[which(data$name %in% names),]
subset$contains_bug = subset$contains_bug == 't'
summary(subset$contains_bug)
runExperiment(subset, metrics, rq1)
savehistory()
