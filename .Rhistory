aucTable$name
aucTable[which(aucTable$name == curName), curName] <- 5
aucTable[which(aucTable$name == curName), curName]
runExperiment(data, metrics, rq1, 1, 20)
runExperiment(data, metrics, rq1, 1, 20)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 20)
runExperiment(data, metrics, rq1, 21, 23)
paste("data", "new", rq, paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = ""), sep="/"))
paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = "")
paste("hello", .Last.value)
paste("data", "new", rq, paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = ""), sep="/")
rq = "rq1"
paste("data", "new", rq, paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = ""), sep="/")
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
Sys.time()
startTime = Sys.time()
endtime = Sys.time()
startTime - endTime
startTime - endtime
auc1-20 = read.csv('data/new/rq1/aucTable1-20.csv')
auc1= read.csv('data/new/rq1/aucTable1-20.csv')
auc2 = read.csv('data/new/rq1/aucTable21-23.csv')
rbind(auc1, auc2)
aucTotal = rbind(auc1, auc2)
write.csv(aucTotal, 'data/new/rq1/aucTable1-23.csv')
aucTotal$X <- NULL
write.csv(aucTotal, 'data/new/rq1/aucTable1-23.csv')
summary(subset)
proj = subset( which(subset$names == subset$names[1]),]
proj = subset[ which(subset$names == subset$names[1]),]
summary(proj)
summary(subset)
summary(data)
subset = data[ which(data$name == data$name[1]),]
summary(subset)
levels(subset$classification)
classifications = .Last.value
typeof(classifications)
subset = data[ which(data$name == data$name[2]),]
levels(subset$classification)
subset = data[ which(data$name == data$name[3]),]
levels(subset$classification)
subset = data[ which(data$name == data$name[4]),]
levels(subset$classification)
levels(subset$classification) <- classifications
levels(subset$classification)
levels(data$classification)
runExperiment(data, metrics, ra1, 1, 3)
runExperiment(data, metrics, r11, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
names = unique(data$name)
names = names[order(names)]
names[1]
subset = data[ which(data$name == names[1]),]
levels(subset$classification)
subset = data[ which(data$name == names[1]),]
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
unique(subset$name)
unique(subset$classification)
unique(data$classification)
subclass = unique(subset$classification)
subclass = subclass[order(subclass)]
subdata = unique(data$classification)
subdata = subdata[order(subdata)]
subclass
subdata
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
options()
getOption(drop.unused.levels)
getOption(add.smooth)
getOption("add.smooth")
getOption("drop.unused.levels")
summary(data)
q()
savehistory()
data = read.csv('~/Desktop/msr_dataset_results.csv')
source('analysis scripts/compute_fit_results.r')
runExperiment(data, metrics, rq1)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq1)
source('analysis scripts/compute_fit_results.r')
runExperiment(data, metrics, rq1)
newresults = .Last.value
results
summary(newresults)
write.csv(newresults, '~/Desktop/fix_data')
source('analysis scripts/compute_fit_results.r')
results = runExperiment(data, metrics, rq1)
write(results, 'test_classification.csv')
write.csv(results, 'test_classification.csv')
write.csv(results, '~/Desktop/test_classification.csv')
summary(results)
p = results$Pval <= 0.05
summary(p)
savehistory()
wclass = read.csv('~/Desktop/test_classification.csv')
wfix = read.csv('~/Desktop/fix_data.csv')
plot(wclass$auc)
require('ggplot2')
boxplot(wclass$auc)
median(wclass$auc)
summary(wclass)
boxplot(wclass$AUC)
boxplot(wfix$AUC)
median(wclass$AUC)
summary(wclass$AUC)
summary(wfix$AUC)
p = wclass$Pval <= 0.05
summary(p)
savehistory()
data = read.csv('~/Desktop/new_data_min.csv')
source('analysis scripts/fit_and_performance.r')
data$contains_bug = data$contains$bug == 't'
summary(data)
summary(data$contains_bug)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 4, 20)
runExperiment(data, metrics, rq1, 21, 23)
runExperiment(data, metrics, rq1, 24, 26)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 24, 26)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
one = read.csv('data/new/rq1/aucTable1-3.csv')
four = read.csv('data/new/rq1/aucTable4-20.csv')
t1 = read.csv('data/new/rq1/aucTable21-23.csv')
t4 = read.csv('data/new/rq1/aucTable24-26.csv')
one = rbind(one, four)
one = rbind(one, t1)
one = rbind(one, t4)
summary(one)
one$names
one$name
write.csv(one, 'data/new/rq1/aucTable1-23.csv')
one$X <- NULL
write.csv(one, 'data/new/rq1/aucTable1-23.csv')
one = read.csv('data/new/rq1/brierTable1-3.csv')
four = read.csv('data/new/rq1/brierTable4-20.csv')
t1 = read.csv('data/new/rq1/brierTable21-23.csv')
one = rbind(one, four)
one = rbind(one, t1)
write.csv(one, 'data/new/rq1/brierTable1-23.csv')
names$one
names(one)
names(one)[1]
names(one)[2]
names(one)[3]
names(one)[3] <- "2011.m1s2.ter"
names(one)[3]
names(one)[4]
names(one)[4] <- "4Dnest"
write.csv(one, 'data/new/rq1/brierTable1-23.csv')
one$X <- NULL
write.csv(one, 'data/new/rq1/brierTable1-23.csv')
one = read.csv('data/new/rq1/aucTable1-23.csv')
names(one)[1]
names(one)[2]
names(one)[3]
names(one)[3] <- "2011.m1s2.ter"
names(one)[4]
names(one)[4] <- "4Dnest"
one$X <- NULL
write.csv(one, 'data/new/rq1/aucTable1-23.csv')
summary(data)
runExperiment(data, metrics, rq2, 1, 3)
savehistory()
runExperiment(data, metrics, rq2, 1, 3)
source('analysis scripts/fit_and_performance.r')
data = read.csv('~/Desktop/new_data_min.csv')
runExperiment(data, metrics, rq2, 4, 6)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
install.packages('foreach')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq2, 4, 6)
setup_parallel()
library(doSNOW)
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3, TRUE)
install.packages(doSNOW)
install.packages('doSNOW')
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK"))
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 1)
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1)
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
runExperiment(data, metrics, rq1, 1, 1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
runExperiment(data, metrics, rq1, 1, 1)
savehistory()
brierTable = read.csv('data/new/rq1/brierTable.csv')
brierTable$X <- NULL
write.csv(brierTable, 'data/new/rq1/brierTable.csv')
brierTable$X.1 <- NULL
write.csv(brierTable, 'data/new/rq1/brierTable.csv')
aucTable = read.csv('data/new/rq2/aucTable.csv')
aucTable$X <- NULL
aucTable$X.1 <- NULL
write.csv(aucTable, 'data/new/rq2/aucTable.csv')
brierTable = read.csv('data/new/rq2/brierTable.csv')
brierTable$X <- NULL
brierTable$X.1 <- NULL
write.csv(brierTable, 'data/new/rq2/brierTable.csv')
summary(aucTable$abs)
summary(aucTable$acceleo)
summary(aucTable$X4Dnest)
summary(aucTable$acceleo)
summary(as.factor(aucTable$acceleo))
summary(aucTable$ace)
q()
savehistory()
data = read.csv('~/Desktop/new_data_min.csv')
source('analysis scripts/fit_and_performance.r')
met = append(metrics, rq1)
fit <- lrm(as.formula(form), data=data, x=T, y=T, penalty=penaltySetting)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
cleanMetrics <- getCleanMetrics(met, data)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=data, x=T, y=T, penalty=penaltySetting)
fit$stats
fit$stats[['d.f.']]
df <- .Last.value
met = append(metrics, rq2)
cleanMetrics <- getCleanMetrics(met, data)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=data, x=T, y=T, penalty=penaltySetting)
met
met = append(met, rq1)
met
cleanMetrics <- getCleanMetrics(met, data)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=data, x=T, y=T, penalty=penaltySetting)
subset = data[ which(data$name == names(data)[1]),]
summary(subset)
names(data)[1]
data$name[1]
subset = data[ which(data$name == data$name[1]),]
summary(subset)
cleanMetrics <- getCleanMetrics(met, data)
cleanMetrics <- getCleanMetrics(met, subset)
form <- paste(rq2, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=subset, x=T, y=T, penalty=penaltySetting)
subset$X <- NULL
cleanMetrics <- getCleanMetrics(met, subset)
form <- paste(rq2, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=subset, x=T, y=T, penalty=penaltySetting)
names(subset)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=subset, x=T, y=T, penalty=penaltySetting)
fit$stats[['d.f.']
]
rq2df = .Last.value
met = append(metrics, rq1)
cleanMetrics <- getCleanMetrics(met, subset)
form <- paste(depVar, paste(cleanMetrics, collapse=" + "), sep = " ~ ")
fit <- lrm(as.formula(form), data=subset, x=T, y=T, penalty=penaltySetting)
fit$stats[['d.f.']]
nrow(subset[ which(subset$contains_bug == 't'), ])
source('analysis scripts/EPV.r')
calcEPV(data)
write.csv(.Last.value, 'data/new/EPV.csv')
subset$contains_bug == 't' and subset$contains_bug == 'f'
subset$contains_bug == 't' && subset$contains_bug == 'f'
calcEPV(data)
vals = .Last.value
vals[which(vals$rq1df < 10 && vals$rq2df < 10),]
vals
vals[which(vals$rq1df < 10 && vals$rq2df < 10),]
names(vals)
vals[which(vals$rq1df < 10),]
vals[which(vals$rq2df < 10),]
nrow(vals[which(vals$rq2df < 10),])
nrow(vals[which(vals$rq1df < 10),])
badnames = vals[which(vals$rq2df < 10),]$names
nrow(badnames)
badnames = vals[which(vals$rq2df < 10),]$name
nrow(badnames)
badnames = vals[which(vals$rq2df < 10),names]
badnames = vals[which(vals$rq2df < 10),'names']
nrow(badnames)
badnames = vals[which(vals$rq2df < 10),'name']
nrow(badnames)
badnames = vals[which(vals$rq2df < 10),]
nrow(badnames)
badnames$name
badnames = badnames$names
subset = data[ -which(data$name %in% badnames),] 
nrow(subset$name)
summary(subset)
subset$name
unique(subset$name)
nrow(unique(subset$name))
length(unique(subset$name))
source('analysis scripts/compute_fit_results.r')
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 't'
write.csv(subset, '~/Desktop/goodprojs.csv')
runExperiment(subset, metrics, rq1)
goodnames = unique(data$names) - badnames
names = unique(data$names)
goodnames = names[!(names %in% badnames)]
length(goodnames)
names = unique(data$name)
goodnames = names[!(names %in% badnames)]
names = unique(data$name)
length(goodnames)
summary(goodnames)
aucTable1 = read.csv('data/new/rq1/aucTable.csv')
runExperiment(subset, metrics, rq1)
results <- .Last.value
write.csv(results, '~/Desktop/rq1.csv')
metrics <- append(metrics, rq1)
runExperiment(subset, metrics, rq2)
results = .Last.value
write.csv(results, '~/rq2.csv')
summary(results)
isTrue = results$Pval (0.05 / 709)
isTrue = results$Pval <= (0.05 / 709)
summary(isTrue)
nrow(results)
summary(results$AUC)
rq1 = read.csv('~/Desktop/rq1.csv')
isTrue = rq1$Pval <= (0.05 / (326 + 347))
summary(isTrue)
isTrue = results$Pval <= (0.05 / (326 + 347))
summary(isTrue)
summary(rq1)
isTrue = results$Pval <= (0.05 / 673)
summary(isTrue)
isTrue = rq1$Pval <= (0.05 / 673)
summary(isTrue)
savehistory()
auc1 = read.csv('data/new/rq1/aucTable.csv')
list = c('one', 'two')
append(list, list)
alldata = auc1[1]
auc1[1]
auc1[2]
auc1[3]
alldata = auc[3]
alldata = auc1[3]
length(names(auc1))
for(i in 4:1235) {
alldata = append(alldata, auc1[i])
}
length(alldata)
alldata = auc1[3]
length(alldata)
alldata
nrow(alldata)
alldata = append(alldata, auc1[4])
nrow(alldata)
length(alldata)
alldata
paste(auc1[3], auc1[4])
alldata = .Last.value
length(alldata)
nrow(alldata)
alldata
summary(alldata)
alldata = append(auc1[3], auc1[4])
summary(alldata)
alldata = append(auc1['abs'], auc1['mts'])
alldata = append(auc1['abs'], auc1['stm'])
alldata = append(auc1['abs'], auc1['acceleo'])
summary(alldata)
alldata = append(as.list(auc1[3]), as.list(auc1['acceleo']))
summary(alldata)
typeof(auc1[3])
alldata = mapply(as.list(auc1[3]), as.list(auc1['acceleo']))
alldata = cbind(as.list(auc1[3]), as.list(auc1['acceleo']))
summary(alldata)
alldata = merge(as.list(auc1[3]), as.list(auc1['acceleo']))
summary(alldata)
alldata = merge(as.list(auc1[3]), as.list(auc1[4]))
summary(alldata)
alldata = append(as.list(auc1[3]), as.list(auc1[4]))
summary(alldata)
(as.list(auc1[3]), as.list(auc1[4]))
summary(alldata)
alldata = lapply(as.list(auc1[3]), as.list(auc1[4]))
alldata = c(as.list(auc1[3]), as.list(auc1[4]))
summary(alldata)
alldata = apply( cbind(auc1[3], auc1[4]), 1, unlist)
summary(alldata)
typeof(auc1[3][1])
typeof(auc1[3,1])
alldata = c(auc1[3], auc1[4])
summary(alldata)
alldata

alldata = c(as.list(auc1[3]), as.list(auc1[4]))
summary(alldata)
alldata = c(as.integer(auc1[3]), as.list(auc1[4]))
alldata = c(as.factor(auc1[3]), as.list(auc1[4]))
alldata = apply(auc1, 2, as.list)
summary(alldata)
data
data = alldata[1]
summary(data)
summary(auc1[3])
summary(alldata[3])
data = data.frame(data)
summary(data)
alldata = data.frame(auc1[3])
summary(alldata)
names(alldata)[1] = "data"
summary(alldata)
append(alldata$data, auc1[4])
summary(.Last.value)
max(auc1, na.rm=TRUE)
auc1 <- sapply(auc1, as.numeric)
max(auc1, na.rm=TRUE)
auc1$X <- NULL
names(auc1)
summary(auc1)
auc1 = read.csv('data/new/rq1/aucTable.csv')
install.packages('taRifx')
library(taRifx)
auc1 = japply(auc1, which(sapply(auc1, class) == "logical"), as.numeric)
summary(auc1)
names(auc1)[1]
auc1$X <- NULL
max(auc1, na.rm=TRUE)
names(auc1)[1]
auc1$name <- NULL
max(auc1, na.rm=TRUE)
min(auc1, na.rm=TRUE)
mean(auc1, na.rm=TRUE)
median(auc1, na.rm=TRUE)
goodprojs = read.csv('~/Desktop/goodprojs.csv')
summary(goodprojs)
rowMeans()
rowMeans(auc1, na.rm = TRUE, dims = 1)
means = .Last.value
summary(means)
summary(colMeans(auc1, na.rm = TRUE, dims = 1))
rowMedian()
rowMedians()
auc2 = read.csv('data/new/rq2/aucTable.csv')
summary(rowMeans(auc2, na.rm=TRUE, dims=1))
auc2 <- japply( auc2, which(sapply(auc2, class)=="logical"), as.numeric )
auc2$X <- NULL
auc2$name <- NULL
summary(rowMeans(auc2, na.rm=TRUE, dims=1))
summary(colMeans(auc2, na.rm=TRUE, dims=1))
rq2
savehistory()
