runExperiment(data, metrics, rq1)
fit
source('analysis scripts/performance.r')
performance.auc(fit, data)
data$buggy
colnames(dataframe)[which(names(dataframe) == "columnName")] <- "newColumnName"
colnames(data)[which(names(data) == "contains_bug")] <- "buggy"
performance.auc(fit, data)
colnames(data)[which(names(data) == "buggy")] <- "contains_bug"
names(data)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
subsetOkForFit(data[which(data$name == 'dltk'),])
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
runExperiment(data, metrics, rq1)
aucTable
data.drame(aucTable)
data.frame(aucTable)
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
testFunction()
source('analysis scripts/fit_and_performance.r')
testFunction()
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
data = read.csv('~/Desktop/new_data_min.csv')
names = unique(data$name)
names = names[1:20]
subset = data[which(data$name %in% names),]
summary(subset)
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 't'
runExperiment(subset, metrics, rq1)
results = .Last.value
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 't'
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 'TRUE'
summary(subset$contains_bug)
subset = data[which(data$name %in% names),]
subset$contains_bug = subset$contains_bug == 't'
summary(subset$contains_bug)
runExperiment(subset, metrics, rq1)
savehistory()
runExperiment(subset, metrics, rq1)
> data = read.csv(
source('analysis scripts/fit_and_performance.r')
data = read.csv('~/Desktop/new_data_min.csv')
names = unique(data$name)
subset = data[which(data$name %in% names[1:20]),]
write.csv('~/Desktop/new_data_subset20.csv')
write.csv(subset, '~/Desktop/new_data_subset20.csv')
runExperiment(subset, metrics, rq1)
subset$contains_bug = subset$contains_bug == 't'
runExperiment(subset, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
names
test <- names[1:5]
test
test = data.frame(test)
test
colnames(test)
colnames(test) = c(names[1:5])
names(test) = c(names[1:5])
test[,new]
test[,names[1:5]] <- NA
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
names <- unique(subset$name)
aucTable <- data.frame(names)
names(aucTable) = "name"
aucTable
for (name in names) {
aucTable[, name] <- NA
}
aucTable
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
aucTable
names
names[order(names)]
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq1)
rq2
rq2 == rq2
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq2)
source('analysis scripts/fit_and_performance.r')
runExperiment(subset, metrics, rq2)
"hello" + rq1 + "e"
h = "hello"
"hello" + h
paste("hello, h)
paste("hello", h)
paste("data", rq, "aucTable.csv", sep="/")
rq = "rq1"
paste("data", rq, "aucTable.csv", sep="/")
proc.time
proc.time()
savehistory()
proc.time()
proc.time()
data = read.csv('~/Desktop/new_data_subset20.csv'_
data = read.csv('~/Desktop/new_data_subset20.csv')
data$contains_bug = data$contains_bug == 't'
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1)
proc.time()
runExperiment(data, metrics, rq1)
proc.time()
q()
savehistory()
data = read.csv('~/Desktop/new_data_min.csv')
data$contains_bug = data$contains_bug == 't'
summary(data)
proc.time()
source('analysis scripts/fit_and_performance.r')
proc.time()
runExperiment(data, metrics, rq1)
source('analysis scripts/fit_and_performance.r')
proc.time()
runExperiment(data, metrics, rq1)
q()
savehistory()
cd ~/
cd '~/'
data = read.csv('~/Desktop/new_data_min.csv')
names = unique(data$names)
subset = data[ which(data$names %in% names[1:50],)
subset = data[ which(data$names %in% names[1:50]),]
source('analysis scripts/fit_and_performance.r')
subset$contains_bug = subset$contains_bug == 't'
runExperiment(subset, metrics, rq1)
names = unique(data$name)
subset = data[ which(data$name %in% names[1:50]),]
subset$contains_bug = subset$contains_bug == 't'
runExperiment(subset, metrics, rq1)
proc.time()
runExperiment(subset, metrics, rq1)
proc.time()
q()
savehistory()
data = read.csv('~/Desktop/new_data_min.csv')
names = unique(data$name)
blankTable = data.frame(names)
name = names[1]
name
blankTable = data.frame(name)
blankTable
for(name in names) {
blankTable[, name] <- NA
}
blankTable
blankTable[-c(1),]
blankTable = .Last.value
write.csv(blankTable, '~/Desktop/blankTable.csv')
summary(names)
names <- names[order(names)]
names
names[1:1234]
names[1:1233]
names[1:1234]
names[1:1233]
data[ which(data$name %in% names[1:5]),]
subset = .Last.value
summary(subset)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 20)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq1, 1, 20)
blankTable
blankTable
names[1]
data.frame(names[1])
for (name in names) {
newTable = data.frame(names[1])
for (name in names) {
newTable[, name] <- NA
}
newTable
total <- rbind(blankTable, newTable)
total
newTable2 = names[2]
for (name in names) {
newTable2[, name] <- NA
}
newTable2 = data.frame(names[2])
for (name in names) {
newTable2[, name] <- NA
}
newTable2
total <- rbind(total, newTable2)
summary(total)
total$names
newTable2$names
rbind(total, newTable2)
names(newTable2)
names(total)
rbind(blankTable, newTable2)
rbind(total, newTable)
rbind(total, newTable2)
newTable = data.frame(names[1:20])
rbind(blankTable, newTable)
blankTable
rbind(blankTable, newTable)
summary(.Last.value)
total
runExperiment(data, metrics, rq1, 1, 20)
subset <- data[ which(data$name %in% names[subsetStart:subsetEnd]),]
subsetStart = 1
subsetEnd = 20
subset <- data[ which(data$name %in% names[subsetStart:subsetEnd]),]
summary(subset)
ddply(subset, "name", function(mydata) { print(paste(mydata$name[1]))})
ddply(subset, "name", function(mydata) { print(summary(mydata))})
ddply(subset, "name", function(mydata) { print(summary(mydata))});
invisible(ddply(subset, "name", function(mydata) { print(summary(mydata))}))
  subsetNames <- names[subsetStart:subsetEnd]
aucTable <<- data.frame(subsetNames)
names(aucTable) = "name"
for(name in names) {
  aucTable[, name] <<- NA
  }
aucTable
for(name in names) {
aucTable
for(name in names) {
aucTable[, name] <- NA
}
aucTable
aucTable[which(aucTable$name == curName), curName]
curName
aucTable$name
aucTable[which(aucTable$name == curName), curName] <- 5
aucTable[which(aucTable$name == curName), curName]
runExperiment(data, metrics, rq1, 1, 20)
runExperiment(data, metrics, rq1, 1, 20)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 20)
runExperiment(data, metrics, rq1, 21, 23)
paste("data", "new", rq, paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = ""), sep="/"))
paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = "")
paste("hello", .Last.value)
paste("data", "new", rq, paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = ""), sep="/")
rq = "rq1"
paste("data", "new", rq, paste("aucTable", subsetStart, "-", subsetEnd, ".csv", sep = ""), sep="/")
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
Sys.time()
startTime = Sys.time()
endtime = Sys.time()
startTime - endTime
startTime - endtime
auc1-20 = read.csv('data/new/rq1/aucTable1-20.csv')
auc1= read.csv('data/new/rq1/aucTable1-20.csv')
auc2 = read.csv('data/new/rq1/aucTable21-23.csv')
rbind(auc1, auc2)
aucTotal = rbind(auc1, auc2)
write.csv(aucTotal, 'data/new/rq1/aucTable1-23.csv')
aucTotal$X <- NULL
write.csv(aucTotal, 'data/new/rq1/aucTable1-23.csv')
summary(subset)
proj = subset( which(subset$names == subset$names[1]),]
proj = subset[ which(subset$names == subset$names[1]),]
summary(proj)
summary(subset)
summary(data)
subset = data[ which(data$name == data$name[1]),]
summary(subset)
levels(subset$classification)
classifications = .Last.value
typeof(classifications)
subset = data[ which(data$name == data$name[2]),]
levels(subset$classification)
subset = data[ which(data$name == data$name[3]),]
levels(subset$classification)
subset = data[ which(data$name == data$name[4]),]
levels(subset$classification)
levels(subset$classification) <- classifications
levels(subset$classification)
levels(data$classification)
runExperiment(data, metrics, ra1, 1, 3)
runExperiment(data, metrics, r11, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
names = unique(data$name)
names = names[order(names)]
names[1]
subset = data[ which(data$name == names[1]),]
levels(subset$classification)
subset = data[ which(data$name == names[1]),]
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3)
unique(subset$name)
unique(subset$classification)
unique(data$classification)
subclass = unique(subset$classification)
subclass = subclass[order(subclass)]
subdata = unique(data$classification)
subdata = subdata[order(subdata)]
subclass
subdata
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
options()
getOption(drop.unused.levels)
getOption(add.smooth)
getOption("add.smooth")
getOption("drop.unused.levels")
summary(data)
q()
savehistory()
data = read.csv('~/Desktop/msr_dataset_results.csv')
source('analysis scripts/compute_fit_results.r')
runExperiment(data, metrics, rq1)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq1)
source('analysis scripts/compute_fit_results.r')
runExperiment(data, metrics, rq1)
newresults = .Last.value
results
summary(newresults)
write.csv(newresults, '~/Desktop/fix_data')
source('analysis scripts/compute_fit_results.r')
results = runExperiment(data, metrics, rq1)
write(results, 'test_classification.csv')
write.csv(results, 'test_classification.csv')
write.csv(results, '~/Desktop/test_classification.csv')
summary(results)
p = results$Pval <= 0.05
summary(p)
savehistory()
wclass = read.csv('~/Desktop/test_classification.csv')
wfix = read.csv('~/Desktop/fix_data.csv')
plot(wclass$auc)
require('ggplot2')
boxplot(wclass$auc)
median(wclass$auc)
summary(wclass)
boxplot(wclass$AUC)
boxplot(wfix$AUC)
median(wclass$AUC)
summary(wclass$AUC)
summary(wfix$AUC)
p = wclass$Pval <= 0.05
summary(p)
savehistory()
data = read.csv('~/Desktop/new_data_min.csv')
source('analysis scripts/fit_and_performance.r')
data$contains_bug = data$contains$bug == 't'
summary(data)
summary(data$contains_bug)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 4, 20)
runExperiment(data, metrics, rq1, 21, 23)
runExperiment(data, metrics, rq1, 24, 26)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 24, 26)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 21, 23)
one = read.csv('data/new/rq1/aucTable1-3.csv')
four = read.csv('data/new/rq1/aucTable4-20.csv')
t1 = read.csv('data/new/rq1/aucTable21-23.csv')
t4 = read.csv('data/new/rq1/aucTable24-26.csv')
one = rbind(one, four)
one = rbind(one, t1)
one = rbind(one, t4)
summary(one)
one$names
one$name
write.csv(one, 'data/new/rq1/aucTable1-23.csv')
one$X <- NULL
write.csv(one, 'data/new/rq1/aucTable1-23.csv')
one = read.csv('data/new/rq1/brierTable1-3.csv')
four = read.csv('data/new/rq1/brierTable4-20.csv')
t1 = read.csv('data/new/rq1/brierTable21-23.csv')
one = rbind(one, four)
one = rbind(one, t1)
write.csv(one, 'data/new/rq1/brierTable1-23.csv')
names$one
names(one)
names(one)[1]
names(one)[2]
names(one)[3]
names(one)[3] <- "2011.m1s2.ter"
names(one)[3]
names(one)[4]
names(one)[4] <- "4Dnest"
write.csv(one, 'data/new/rq1/brierTable1-23.csv')
one$X <- NULL
write.csv(one, 'data/new/rq1/brierTable1-23.csv')
one = read.csv('data/new/rq1/aucTable1-23.csv')
names(one)[1]
names(one)[2]
names(one)[3]
names(one)[3] <- "2011.m1s2.ter"
names(one)[4]
names(one)[4] <- "4Dnest"
one$X <- NULL
write.csv(one, 'data/new/rq1/aucTable1-23.csv')
summary(data)
runExperiment(data, metrics, rq2, 1, 3)
savehistory()
runExperiment(data, metrics, rq2, 1, 3)
source('analysis scripts/fit_and_performance.r')
data = read.csv('~/Desktop/new_data_min.csv')
runExperiment(data, metrics, rq2, 4, 6)
data$contains_bug = data$contains_bug == 't'
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
install.packages('foreach')
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq2, 4, 6)
setup_parallel()
library(doSNOW)
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq2, 4, 6)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 3, TRUE)
install.packages(doSNOW)
install.packages('doSNOW')
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK"))
runExperiment(data, metrics, rq1, 1, 3)
runExperiment(data, metrics, rq1, 1, 1)
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1)
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
runExperiment(data, metrics, rq1, 1, 1)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
source('analysis scripts/fit_and_performance.r')
runExperiment(data, metrics, rq1, 1, 1, TRUE)
runExperiment(data, metrics, rq1, 1, 1)
savehistory()
