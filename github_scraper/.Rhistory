data(results.csv)
read.csv("results.csv")
summary()
summary(results)
objects
read.csv("results.csv")
results = read.csv(results.csv)
results := read.csv(results.csv)
results := read.csv("results.csv")
results = read.csv("results.csv")
summary(results)
fixes = subset(results, Classification == Corrective)
fixes = subset(results, classification == Corrective)
fixes = subset(results, classification == Corrective)
fixes = subset(results, classification == "Corrective")
fixes
summary(fixes)
bugs = subset(results, contains_bug == TRUE)
summary(bugs)
boxplot(commit_length, data = fixes)
bugs$commit_length
boxplot(fixes$commit_length)
boxplot(bugs$commit_length)
bugs$commit_length
q()
results
boxplot(results$commit_length, main="Commit length of all data", ylab="commit length")
boxplot(fixes$commit_length, main="Commit length of corrective commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
q()
boxplot(results$commit_length, main="Commit length of all commits", ylab="commit length")
boxplot(fixes$commit_length, main="Commit length of corrective commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
summary(results)
no_bugs = subset(results, contains_bug = FALSE)
summary(no_bugs)
boxplot(no_bugs$commit_length, main="Commit length of bug-less commits", ylab="commit length")
q()
history(Inf)
ls
clear
q()
source("plot_generator.r")
q()
commandArgs
args <- commandArgs(trailingOnly = FALSE)
args
q()
read.csv("jruby.csv")
jruby = read.csv("jruby.csv")
summary(jruby)
fixes = subset(results, classification == "Corrective")
bugs = subset(results, contains_bug == TRUE)
no_bugs = subset(results, contains_bug = FALSE)
summary(no_bugs)
boxplot(results$commit_length, main="Commit length of all commits", ylab="commit length")
boxplot(fixes$commit_length, main="Commit length of corrective commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
boxplot(no_bugs$commit_length, main="Commit length of bug-less commits", ylab="commit length")
q()
results
results = jruby
boxplot(results$commit_length, main="Commit length of all commits", ylab="commit length")
boxplot(no_bugs$commit_length, main="Commit length of bug-less commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
boxplot(fixes$commit_length, main="Commit length of corrective commits", ylab="commit length")
boxplot(results$commit_length, main="Commit length of all commits", ylab="commit length")
boxplot(jruby$commit_length, main="Commit length of corrective commits", ylab="commit length")
q()
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
boxplot(no_bugs$commit_length, main="Commit length of bug-less commits", ylab="commit length")
q()
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
dev.off()
q()
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits in jruby", ylab="commit length")
boxplot(no_bugs$commit_length, main="Commit length of bug containing commits in jruby", ylab="commit length")
q()
pdf(jruby_plots.pdf, width=6,height=4,paper='special')
pdf(jruby_plots.pdf, width=6,height=4,paper='special')
pdf("jruby_plots.pdf", width=6,height=4,paper='special')
boxplot(results$commit_length, main="Commit length of all commits", ylab="commit length")
boxplot(fixes$commit_length, main="Commit length of corrective commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
boxplot(no_bugs$commit_length, main="Commit length of bug-less commits", ylab="commit length")
dev.off()
q()
pdf("jruby_plots.pdf", width=6,height=6,paper='special')
boxplot(fixes$commit_length, main="Commit length of corrective commits", ylab="commit length")
boxplot(bugs$commit_length, main="Commit length of bug containing commits", ylab="commit length")
boxplot(no_bugs$commit_length, main="Commit length of bug-less commits", ylab="commit length")
dev.off()
q()
q()
paste("hello", "world")
q()
sub("^([^.]*).*", "\\1", 'jruby.csv') 
q
q()
pdf("jruby.pdf", height = 6, width = 6, paper = 'special')
joined = merge( bugs$commit_length, no_bugs$commit_length)
names(joined) <- c("Bug Introducing", "Bug Free")
boxplot(joined, main = "Commit length of Bug Introducing and Bug Free Commits", ylab = "Length of commit")
dev.off()
q()
jruby[1[
jruby[1]
jruby$commit_message[1]
nchar(jruby$commit_message[1])
jruby$commit_message[1]
jruby$commit_message["A"]
jruby["A","A"]
jruby[1,1]
jruby[commit_message,1]
jruby$commit_message
jruby$commit_message[0]
jruby$commit_message[2]
jruby["commit_length"] <- NA
jruby$commit_length <- nchar(jruby$commit_message)
jruby$commit_length <- stri_length(jruby$commit_message)
library(stringr)
library(stringi)
class(jruby$commit_message)
class(jruby$commit_message[1])
length(jruby$commit_message)
length(jruby$commit_message[1])
summary(jruby$commit_message[1])
length(jruby$commit_message[1])
str(jruby$commit_message[1])
as.character(jruby$commit_message[1])
nchar(as.character(jruby$commit_message[1]))
jruby$commit_length <- nchar(as.character(jruby$commit_message))
boxplot(results$commit_length, main="Commit length of all commits", ylab="commit length")
summary(jruby$commit_length)
q()
results = read.csv("results.csv")
results["commit_length"] <- NA
results$commit_length <- nchar(as.character(results$commit_message))
bugs = subset(results, contains_bug == TRUE)
no_bugs = subset(results, contains_bug = FALSE)
bugs$commit_length
no_bugs = subset(results, contains_bug = false)
summary(no_bugs)
no_bugs = subset(results, contains_bug = FALSE)
summary(no_bugs)
joined = merge( bugs$commit_length, no_bugs$commit_length)
names(joined) <- c("Bug Introducing", "Bug Free")
q()
